<?php

/**
 * Handles items that have been selected for automatic updates.
 * Hooks into WP_Automatic_Updater
 */
class Jetpack_Autoupdate {

	public $jetpack;
	public $is_updating = false;

	public $expected = array(
		'plugin'=> array(),
		'theme' => array(),
	);

	public $results;

	public $success = array(
		'plugin' => array(),
		'theme' => array(),
	);

	public $failed = array(
		'plugin' => array(),
		'theme' => array(),
	);

	private static $instance = null;

	static function init() {
		if ( is_null( self::$instance ) ) {
			self::$instance = new Jetpack_Autoupdate;
		}
		return self::$instance;
	}

	private function __construct() {
		if ( Jetpack::is_module_active( 'manage' ) ) {
			add_filter( 'auto_update_plugin',  array( $this, 'autoupdate_plugin' ), 10, 2 );
			add_filter( 'auto_update_theme',   array( $this, 'autoupdate_theme' ), 10, 2 );
			add_filter( 'auto_update_core',    array( $this, 'autoupdate_core' ), 10, 2 );
			add_action( 'automatic_updates_complete', array( $this, 'automatic_updates_complete' ), 999, 1 );
		}
	}

	function autoupdate_plugin( $update, $item ) {
		$autoupdate_plugin_list = Jetpack_Options::get_option( 'autoupdate_plugins', array() );
		if ( in_array( $item->plugin, $autoupdate_plugin_list ) ) {
			$this->expect( $item->plugin );
 			return true;
		}

		return $update;
	}

	function autoupdate_theme( $update, $item ) {
		$autoupdate_theme_list = Jetpack_Options::get_option( 'autoupdate_themes', array() );
		if ( in_array( $item->theme , $autoupdate_theme_list) ) {
			$this->expect( $item->theme, $type = 'theme' );
			return true;
		}
		return $update;
	}

	function autoupdate_core( $update, $item ) {
		$autoupdate_core = Jetpack_Options::get_option( 'autoupdate_core', false );
		if ( $autoupdate_core ) {
			return $autoupdate_core;
		}
		return $update;
	}

	/**
	 * Stores the an item identifier to the expected array.
	 *
	 * @param string $item  Example: 'jetpack/jetpack.php' for type 'plugin' or 'twentyfifteen' for type 'theme'
	 * @param string $type 'plugin' or 'theme'
	 */
	function expect( $item, $type='plugin' ) {
		$this->is_updating = true;
		$this->expected[ $type ][] = $item;
	}

	/**
	 * On completion of an automatic update, let's store the results.
	 *
	 * @param $results - Sent by WP_Automatic_Updater after it completes an autoupdate action. Results may be empty.
	 */
	function automatic_updates_complete( $results ) {

		if ( empty( $results ) && empty( $this->expected ) ) {
			return;
		}

		$this->results = $results;

		add_action( 'shutdown', array( $this, 'bump_stats' ) );

		$items_to_log = array( 'plugin', 'theme' );
		foreach( $items_to_log as $items ) {
			$this->log_items( $items );
		}

		// grab only the last month of logs
		$log = array_slice( Jetpack_Options::get_option( 'updates_log', array() ), 0, 59 );
		// Append our event to the log
		$log[] = array(
			'time'		=> time(),
			'user_id'	=> get_current_user_id(),
			'results'	=> $results,
			'failed'	=> $this->failed,
			'success'	=> $this->success
		);

		// Try add_option first, to make sure it's not autoloaded.
		if ( ! add_option( 'jetpack_updates_log', $log, null, 'no' ) ) {
			Jetpack_Options::update_option('updates_log', $log);
		}
	}

	/**
	 * Iterates through expected items ( plugins or themes ) and compares them to actual results.
	 *
	 * @param $items 'plugin' or 'theme'
	 */
	function log_items( $items ) {
		$item_results = $this->get_successful_updates( $items );

		foreach( $this->expected[ $items ] as $item ) {
			if ( in_array( $item, $item_results ) ) {
				$this->success[ $items ][] = $item;
			} else {
				$this->failed[ $items ][] = $item;
			}
		}
	}

	function bump_stats() {
		$log = array();
		$this->jetpack = Jetpack::init();
		// Bump numbers
		if ( ! empty( $this->success['plugin'] ) ) {
			$this->jetpack->stat( 'autoupdates/plugin-success', count( $this->success['plugin'] ) );
			$log['plugins_success'] = $this->success['plugin'];
		}

		if ( ! empty( $this->failed['plugin'] ) ) {
			$this->jetpack->stat( 'autoupdates/plugin-fail', count( $this->failed['plugin'] ) );
			$log['plugins_failed'] = $this->failed['plugin'];
		}

		if ( ! empty( $this->success['theme'] ) ) {
			$this->jetpack->stat( 'autoupdates/theme-success', count( $this->success['theme'] ) );
			$log['themes_success'] = $this->success['theme'];
		}

		if ( ! empty( $this->failed['theme'] ) ) {
			$this->jetpack->stat( 'autoupdates/theme-fail', count( $this->failed['theme'] ) );
			$log['themes_failed'] = $this->failed['theme'];
		}

		$this->jetpack->do_stats( 'server_side' );

		// Send a more detailed log to logstash
		if ( ! empty( $log ) ) {
			Jetpack::load_xml_rpc_client();
			$xml = new Jetpack_IXR_Client( array(
				'user_id' => get_current_user_id()
			) );
			$log['blog_id'] = Jetpack_Options::get_option( 'id' );
			$xml->query( 'jetpack.debug_autoupdate', $log );
		}
	}

	/**
	 * Parses the autoupdate results generated by WP_Automatic_Updater and returns a simple array of successful items
	 *
	 * @param string $type 'plugin' or 'theme'
	 *
	 * @return array
	 */
	private function get_successful_updates( $type = 'plugin' ) {
		$successful_updates = array();

		if ( ! isset( $this->results[ $type ] ) ) {
			return $successful_updates;
		}

		foreach( $this->results[ $type ] as $result ) {
			if ( $result->result ) {
				switch( $type ) {
					case 'theme':
						$successful_updates[] = $result->item->theme;
						break;
					default:
						$successful_updates[] = $result->item->plugin;
				}
			}
		}

		return $successful_updates;
	}

}
Jetpack_Autoupdate::init();
